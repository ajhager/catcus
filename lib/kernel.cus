( Primitives )

" call " ( quot -- )
	" function(v1) { runtime.exec(v1); } "
def

" compose " ( quot1 quot2 -- quot3 )
	" function(v1, v2) { runtime.push(v1.concat(v2)); } "
def

" clear " ( ... -- )
	" function() { runtime.clear(); } "
def

" exit " ( -- )
	" function() { process.exit(); } "
def

" add " ( x y -- z )
	" function(v1, v2) { runtime.push(v1 + v2); } "
def

" sub " ( x y -- z )
	" function(v1, v2) { runtime.push(v1 - v2); } "
def

" mul " ( x y -- z )
	" function(v1, v2) { runtime.push(v1 * v2); } "
def

" div " ( x y -- z )
	" function(v1, v2) { runtime.push(v1 / v2); } "
def

" mod " ( x y -- z )
	" function(v1, v2) { runtime.push(v1 % v2); } "
def

" eq? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 === v2); } "
def

" neq? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 !== v2); } "
def

" lt? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 < v2); } "
def

" lte? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 <= v2); } "
def

" gt? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 > v2); } "
def

" gte? " ( x y -- cond )
	" function(v1, v2) { runtime.push(v1 >= v2); } "
def

" drop " ( x -- )
	" function(x) { } "
def

" 2drop " ( x y -- )
	" function(x, y) { } "
def

" 3drop " ( x y z -- )
	" function(x, y, z) { } "
def

" 4drop " ( w x y z -- )
	" function(w, x, y, z) { } "
def

" dup " ( x -- x x )
	" function(v1) {
		runtime.push(v1);
		runtime.push(v1);
	} "
def

" 2dup " ( x y -- x y x y )
	" function(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
		runtime.push(v2);
	} "
def

" 3dup " ( x y z -- x y z x y z )
	" function(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
	} "
def

" 4dup " ( w x y z -- w x y z w x y z )
	" function(v1, v2, v3, v4) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
	} "
def

" nip " ( x y -- y )
	" function(v1, v2) { runtime.push(v2); } "
def

" over " ( x y -- x y x )
	" function(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
	} "
def

" pick " ( x y z -- x y z x )
	" function(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} "
def

" rot " ( x y z -- y z x )
	" function(v1, v2, v3) {
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} "
def

" swap " ( x y -- y x )
	" function(v1, v2) {
		runtime.push(v2);
		runtime.push(v1);
	} "
def

" dip " ( x quot -- x )
	" function(v1, v2) {
		runtime.exec(v2);
		runtime.push(v1);
	} "
def

" if " ( cond quot1 quot2 -- x )
	" function(v1, v2, v3) {
		if (v1) {
			exec(v2);
		} else {
			exec(v3);
		}
	} "
def

( Combinators )

: when ( cond quot -- x ) swap [ call ] [ drop ] if ;
: 2dip ( x y quot -- x y ) swap [ dip ] dip ;
: 3dip ( x y z quot -- x y z ) swap [ 2dip ] dip ;
