( Primitives )

" call " " function(v1) { runtime.exec(v1); } " def
" compose " " function(v1, v2) { runtime.push(v1.concat(v2)); } " def
" clear " " function() { runtime.clear(); } " def
" exit " " function() { process.exit(); } " def

" + " " function(v1, v2) { runtime.push(v1 + v2); } " def
" - " " function(v1, v2) { runtime.push(v1 - v2); } " def
" * " " function(v1, v2) { runtime.push(v1 * v2); } " def
" / " " function(v1, v2) { runtime.push(v1 / v2); } " def
" % " " function(v1, v2) { runtime.push(v1 % v2); } " def
" == " " function(v1, v2) { runtime.push(v1 === v2); } " def
" != " " function(v1, v2) { runtime.push(v1 !== v2); } " def
" < " " function(v1, v2) { runtime.push(v1 < v2); } " def
" <= " " function(v1, v2) { runtime.push(v1 <= v2); } " def
" > " " function(v1, v2) { runtime.push(v1 > v2); } " def
" >= " " function(v1, v2) { runtime.push(v1 >= v2); } " def

" drop " " function(v1) { } " def
" 2drop " " function(v1, v2) { } " def
" 3drop " " function(v1, v2, v3) { } " def
" 4drop " " function(v1, v2, v3, v4) { } " def

" dup " " function(v1) {
		runtime.push(v1);
		runtime.push(v1);
	} "
def

" 2dup " " function(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
		runtime.push(v2);
	} "
def

" 3dup " " function(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
	} "
def

" 4dup " " function(v1, v2, v3, v4) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
	} "
def

" nip " " function(v1, v2) { runtime.push(v2); } " def

" over " " function(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
	} "
def

" pick " " function(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} "
def

" rot " " function(v1, v2, v3) {
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} "
def

" swap " " function(v1, v2) {
		runtime.push(v2);
		runtime.push(v1);
	} "
def

" dip " " function(v1, v2) {
		runtime.exec(v2);
		runtime.push(v1);
	} "
def

" if " " function(v1, v2, v3) {
		if (v1) {
			exec(v2);
		} else {
			exec(v3);
		}
	} "
def

( Combinators )

: when swap [ call ] [ drop ] if ;

: 2dip ( x y quot -- x y ) swap [ dip ] dip ;
: 3dip ( x y z quot -- x y z ) swap [ 2dip ] dip ;
