( Primitives )

JS: true
	function() {
		runtime.push(true);
	} ;

JS: false
	function() {
		runtime.push(false);
	} ;

JS: null
	function() {
		runtime.push(null);
	} ;

JS: undefined
	function() {
		runtime.push(undefined);
	} ;

JS: call
	function call(v1) {
		runtime.exec(v1);
	} ;

JS: new
	function neww(v1) {
		runtime.push(new v1());
	} ;

JS: boa
	function boa(v1) {
		runtime.call(v1, true);
	} ;

JS: instanceof
	function instanceoff(v1, v2) {
		runtime.push(v1 instanceof v2);
	} ;

JS: get
	function get(v1, v2) {
		runtime.push(v1[v2]);
	} ;

JS: set
	function set(v1, v2, v3) {
		v1[v2] = v3;
		runtime.push(v1);
	} ;

JS: compose
	function compose(v1, v2) {
		runtime.push(v1.concat(v2));
	} ;

JS: curry
	function curry(v1, v2) {
		v2.unshift(v1);
		runtime.push(v2);
	} ;

JS: clear
	function clear() {
		runtime.clear();
	} ;

JS: exit
	function exit() {
		process.exit();
	} ;

JS: .
	function pp(v1) {
		console.log(runtime.print(v1));
	} ;

JS: +
	function add(v1, v2) {
		runtime.push(v1 + v2);
	} ;

JS: -
	function sub(v1, v2) {
		runtime.push(v1 - v2);
	} ;

JS: *
	function mul(v1, v2) {
		runtime.push(v1 * v2);
	} ;

JS: /
	function div(v1, v2) {
		runtime.push(v1 / v2);
	} ;

JS: %
	function mod(v1, v2) {
		runtime.push(v1 % v2);
	} ;

JS: ==
	function eq(v1, v2) {
		runtime.push(v1 === v2);
	} ;

JS: !=
	function neq(v1, v2) {
		runtime.push(v1 !== v2);
	} ;

JS: <
	function lt(v1, v2) {
		runtime.push(v1 < v2);
	} ;

JS: <=
	function lteq(v1, v2) {
		runtime.push(v1 <= v2);
	} ;

JS: >
	function gt(v1, v2) {
		runtime.push(v1 > v2);
	} ;

JS: >=
	function gteq(v1, v2) {
		runtime.push(v1 >= v2);
	} ;

JS: drop function(x) { } ;

JS: 2drop function(x, y) { } ;

JS: 3drop function(x, y, z) { } ;

JS: 4drop function(w, x, y, z) { } ;

JS: dup
	function dup(v1) {
		runtime.push(v1);
		runtime.push(v1);
	} ;

JS: 2dup
	function(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
		runtime.push(v2);
	} ;

JS: 3dup
	function(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
	} ;

JS: 4dup
	function(v1, v2, v3, v4) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v4);
	} ;

JS: nip
	function nip(v1, v2) {
		runtime.push(v2);
	} ;

JS: over
	function over(v1, v2) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v1);
	} ;

JS: pick
	function pick(v1, v2, v3) {
		runtime.push(v1);
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} ;

JS: rot
	function rot(v1, v2, v3) {
		runtime.push(v2);
		runtime.push(v3);
		runtime.push(v1);
	} ;

JS: swap
	function swap(v1, v2) {
		runtime.push(v2);
		runtime.push(v1);
	} ;

JS: dip
	function dip(v1, v2) {
		runtime.exec(v2);
		runtime.push(v1);
	} ;

JS: if
	function ife(v1, v2, v3) {
		if (v1) {
			runtime.exec(v2);
		} else {
			runtime.exec(v3);
		}
	} ;

( Combinators )

: keep over [ call ] dip ;
: 2keep [ 2dup ] dip 2dip ;
: 2over ( x y z -- x y z x y ) pick pick ;
: bi ( x p q -- ) [ keep ] dip call ;
: 2bi ( x y p q -- ) [ 2keep ] dip call ;
: 2dip ( x y quot -- x y ) swap [ dip ] dip ;
: 3dip ( x y z quot -- x y z ) swap [ 2dip ] dip ;
: when ( cond quot -- x ) swap [ call ] [ drop ] if ;

( Looping )

: do dup 2dip ;
: while swap do compose [ loop ] curry when ;
: until [ [ not ] compose ] dip while ;
: loop [ call ] keep [ loop ] curry when ;
